VPATH = lua/src:src:$(BUILDDIR):unittest

LUA_SOURCES = \
  lapi.c lauxlib.c lbaselib.c lcode.c \
  ldblib.c ldebug.c ldo.c ldump.c \
  lfunc.c lgc.c linit.c liolib.c \
  llex.c lmathlib.c lmem.c loadlib.c \
  lobject.c lopcodes.c loslib.c lparser.c \
  lstate.c lstring.c lstrlib.c ltable.c \
  ltablib.c ltm.c lundump.c lvm.c \
  lzio.c

LIBTUNDRA_SOURCES = \
	BinaryWriter.cpp BuildQueue.cpp Common.cpp DagGenerator.cpp \
	Driver.cpp FileInfo.cpp Hash.cpp HashTable.cpp \
	IncludeScanner.cpp JsonParse.cpp MemAllocHeap.cpp \
	MemAllocLinear.cpp MemoryMappedFile.cpp PathUtil.cpp Profiler.cpp \
	ScanCache.cpp Scanner.cpp SignalHandler.cpp StatCache.cpp \
	TargetSelect.cpp Thread.cpp TerminalIo.cpp \
	ExecUnix.cpp ExecWin32.cpp DigestCache.cpp FileSign.cpp \
	HashSha1.cpp HashFast.cpp ConditionVar.cpp ReadWriteLock.cpp

T2LUA_SOURCES = LuaMain.cpp LuaInterface.cpp LuaInterpolate.cpp LuaJsonWriter.cpp \
								LuaPath.cpp LuaProfiler.cpp

T2INSPECT_SOURCES = InspectMain.cpp

UNITTEST_SOURCES = \
	TestHarness.cpp Test_BitFuncs.cpp Test_Buffer.cpp Test_Djb2.cpp Test_Hash.cpp \
	Test_IncludeScanner.cpp Test_Json.cpp Test_MemAllocLinear.cpp Test_Pow2.cpp \
	Test_TargetSelect.cpp test_PathUtil.cpp Test_HashTable.cpp

TUNDRA_SOURCES = Main.cpp

PATHCONTROL_SOURCES = PathControl.cpp

LUA_OBJECTS       	 := $(addprefix $(BUILDDIR)/,$(LUA_SOURCES:.c=$(OBJSUFFIX)))
LIBTUNDRA_OBJECTS 	 := $(addprefix $(BUILDDIR)/,$(LIBTUNDRA_SOURCES:.cpp=$(OBJSUFFIX)))
LIBTUNDRA_OBJECTS		 := $(LIBTUNDRA_OBJECTS:.c=$(OBJSUFFIX))
T2LUA_OBJECTS     	 := $(addprefix $(BUILDDIR)/,$(T2LUA_SOURCES:.cpp=$(OBJSUFFIX)))
T2INSPECT_OBJECTS 	 := $(addprefix $(BUILDDIR)/,$(T2INSPECT_SOURCES:.cpp=$(OBJSUFFIX)))
UNITTEST_OBJECTS  	 := $(addprefix $(BUILDDIR)/,$(UNITTEST_SOURCES:.cpp=$(OBJSUFFIX)))
TUNDRA_OBJECTS    	 := $(addprefix $(BUILDDIR)/,$(TUNDRA_SOURCES:.cpp=$(OBJSUFFIX)))

ALL_SOURCES = \
							$(TUNDRA_SOURCES) \
							$(LIBTUNDRA_SOURCES) \
						 	$(LUA_SOURCES) \
							$(T2LUA_SOURCES) \
							$(T2INSPECT_SOURCES) \
							$(PATHCONTROL_SOURCES)

ALL_DEPS    = $(ALL_SOURCES:.cpp=.d)
ALL_DEPS   := $(addprefix $(BUILDDIR)/,$(ALL_DEPS:.c=.d))

INSTALL_BASE   = $(DESTDIR)$(PREFIX)
INSTALL_BIN    = $(INSTALL_BASE)/bin
INSTALL_SCRIPT = $(INSTALL_BASE)/share/tundra

INSTALL_DIRS   = $(INSTALL_BIN) $(INSTALL_SCRIPT)
UNINSTALL_DIRS = $(INSTALL_SCRIPT)

FILES_BIN = tundra2$(EXESUFFIX) t2-lua$(EXESUFFIX) t2-inspect$(EXESUFFIX)

common-all: \
	$(BUILDDIR)/git_version.c \
	$(BUILDDIR)/tundra2$(EXESUFFIX) \
	$(BUILDDIR)/t2-lua$(EXESUFFIX) \
	$(BUILDDIR)/t2-inspect$(EXESUFFIX) \
	$(BUILDDIR)/t2-unittest$(EXESUFFIX)

$(BUILDDIR)/git_version.c:
	perl make-git-version.pl $@

GIT_OBJS = $(BUILDDIR)/git_version$(OBJSUFFIX)

$(BUILDDIR)/$(LIBPREFIX)tundralua$(LIBSUFFIX): $(LUA_OBJECTS)
	$(E) LIB $@
	$(Q) $(LIBCMD)$@ $^

$(BUILDDIR)/$(LIBPREFIX)tundra$(LIBSUFFIX): $(LIBTUNDRA_OBJECTS)
	$(E) LIB $@
	$(Q) $(LIBCMD)$@ $^

$(BUILDDIR)/tundra2$(EXESUFFIX): $(TUNDRA_OBJECTS) $(BUILDDIR)/$(LIBPREFIX)tundra$(LIBSUFFIX) $(GIT_OBJS)
	$(E) LINK $@
	$(Q) $(LINKCMD)$@ $(LDFLAGS) $(CXXLIBFLAGS) $(GIT_OBJS) $(TUNDRA_OBJECTS)

$(BUILDDIR)/t2-lua$(EXESUFFIX): $(T2LUA_OBJECTS) $(BUILDDIR)/$(LIBPREFIX)tundra$(LIBSUFFIX) $(BUILDDIR)/$(LIBPREFIX)tundralua$(LIBSUFFIX)
	$(E) LINK $@
	$(Q) $(LINKCMD)$@ $(CXXLIBFLAGS) $(T2LUA_OBJECTS) $(LDFLAGS) tundralua.lib

$(BUILDDIR)/t2-inspect$(EXESUFFIX): $(T2INSPECT_OBJECTS) $(BUILDDIR)/$(LIBPREFIX)tundra$(LIBSUFFIX)
	$(E) LINK $@
	$(Q) $(LINKCMD)$@ $(CXXLIBFLAGS) $(T2INSPECT_OBJECTS) $(LDFLAGS)

$(BUILDDIR)/t2-unittest$(EXESUFFIX): $(UNITTEST_OBJECTS) $(BUILDDIR)/$(LIBPREFIX)tundra$(LIBSUFFIX)
	$(E) LINK $@
	$(Q) $(LINKCMD)$@ $(CXXLIBFLAGS) $(UNITTEST_OBJECTS) $(LDFLAGS)

$(BUILDDIR)/PathControl$(EXESUFFIX): PathControl.cpp $(BUILDDIR)
	$(E) LINK $@
ifeq ($(UNIX), yes)
	$(Q) $(CXX) -o $@ $(CPPFLAGS) $(CXXFLAGS) $(CXXLIBFLAGS) -DUNICODE $^
else
	$(Q) cl /Fe$@ $(CPPFLAGS) $(CXXFLAGS) $(CXXLIBFLAGS) /DUNICODE $^
endif

clean:
	$(RMDIR) $(BUILDDIR)

run-unit-tests: $(BUILDDIR)/t2-unittest$(EXESUFFIX)
	$(BUILDDIR)/t2-unittest$(EXESUFFIX)

run-functional-tests: $(BUILDDIR)/tundra2$(EXESUFFIX)
	perl run-tests.pl $(BUILDDIR)/tundra2$(EXESUFFIX)

run-all-tests: run-unit-tests run-functional-tests

.PHONY: clean all run-unit-tests run-functional-tests run-all-tests common-all
